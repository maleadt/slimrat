################################################################################
# Configuration
#

# Package definition
package Slimrat::Server::Data::Restriction;

=pod

=head1 NAME

Slimrat::Server::Data::Restriction - Slimrat restriction data object

=head1 DESCRIPTION

The C<Slimrat::Server::Data::Restriction> package provides a tiny data object
which contains a restriction and all its obliged attributes. It also includes a
dynamic way to request related objects through lazy attributes and a reference
to the active backend.

=head1 SYNPOSIS

=cut

# Packages
use Moose;
use Slimrat::Server::Data;

# Consume roles
with 'Slimrat::Server::Data';

# Write nicely
use strict;
use warnings;

# Constants
use constant KEYS_FILTER_UNIQUE => [qw{id}];
use constant KEYS_FILTER_REGULAR => [qw{type}];
use constant KEYS_DATASET => [qw{type description parameters}];


################################################################################
# Attributes
#

=pod

=head1 ATTRIBUTES

=head2 C<id>

This attribute uniquely identifies a restriction. It is used to distinguish
differend restrictions, as well as create links to other data structures.

It is a read-only attribute, which means a restriction cannot change its id
after creation. Contrary to the unique attributes in C<Group> and C<Download>,
this attribute should be autogenerated by the backend plugin.

=cut

has 'id' => (
	is		=> 'ro',
	isa		=> 'Int',
	required	=> 1
);

=pod

=head2 C<description>

This attribute is a human-friendly description of the restriction. It is a
read-write accessor, and will trigger a backend update if the C<propagate>
flag is set.

=cut

has 'description' => (
	is		=> 'rw',
	isa		=> 'Str',
	trigger		=> \&_trigger_description
);

sub _trigger_description {
	my ($self, $value) = @_;
	return unless ($self->propagation == Slimrat::Server::Data::PROP_UPDATE);
	
	$self->backend->update_restriction(
		{ id => $self->id },
		{ description => $value }
	);
}

=pod

=head2 C<type>

This required attribute describes the type of a restriction. It is used to
select the correct C<Restricter> plugin to process the C<Restriction>. It is
a read-only attribute, meaning an existing C<Restriction> cannot change its type
afterwards.

=cut

has 'type' => (
	is		=> 'ro',
	isa		=> 'Str',
	required	=> 1
);

=pod

=head2 C<parameters>

This attribute provides information for a C<Restricter> plugin to work properly.
It contains a hash which is used to build a C<Configuration> object which in
turn will be passed to the instantiated C<Restricter> plugin.

This is a writable value, which'll trigger a backend update if the C<propagate>
flag is set.

=cut

has 'parameters' => (
	is		=> 'rw',
	isa		=> 'HashRef',
	trigger		=> \&_trigger_parameters
);

sub _trigger_parameters {
	my ($self, $value) = @_;
	return unless ($self->propagation == Slimrat::Server::Data::PROP_UPDATE);
	
	$self->backend->update_restriction(
		{ id => $self->id },
		{ parameters => $value }
	);
}

################################################################################
# Methods
#

=pod

=head1 METHODS

=cut

sub BUILD {
	my ($self) = @_;
	
	# Object creation
	if ($self->propagation == Slimrat::Server::Data::PROP_ADD) {
		my %dataset = ();
		foreach my $key (@{KEYS_DATASET()}) {
			my $value = $self->{$key};
			if (defined $value) {
				$dataset{$key} = $value;
			}
		}
		$self->{id} = $self->backend->add_restriction(%dataset);
		$self->propagation(Slimrat::Server::Data::PROP_OFF);	# TODO?
	}
}

1;

__END__

=pod

=head1 COPYRIGHT

Copyright 2008-2010 The slimrat development team as listed in the AUTHORS file.

This program is free software; you can redistribute
it and/or modify it under the same terms as Perl itself.

The full text of the license can be found in the
LICENSE file included with this module.

=cut
